#!/bin/bash
set -e

source $(dirname $0)/version

cd $(dirname $0)/..

PROJECT=`basename "$PWD"`

case $(uname -m) in
  aarch64 | arm64)
    ARCH=arm64
    ;;
  x86_64)
    ARCH=amd64
    ;;
  s390x)
    ARCH=s390x
    ;;
  *)
    echo "$(uname -a): unsupported architecture"
    exit 1
esac

if [ ! -x ./bin/longhorn ]; then
    ./scripts/build
fi

cp -r bin package/

APIVERSION=`./bin/longhorn-instance-manager version --client-only|jq ".clientVersion.instanceManagerAPIVersion"`
TAG=${TAG:-v${APIVERSION}_`date -u +%Y%m%d`}
REPO=${REPO:-longhornio}
IMAGE=${REPO}/${PROJECT}:${TAG}

# update base image to get latest changes
grep FROM package/Dockerfile | awk '{print $2}' | while read -r BASE_IMAGE
do
    docker pull "$BASE_IMAGE"
done

function convert_version_to_major_minor_x() {
    local version="$1"
    if [[ "$version" =~ ^v([0-9]+)\.([0-9]+)\. ]]; then
        echo "v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.x"
    else
        echo "Invalid version format: $version"
    fi
}

function get_branch() {
  local version_file="version"
  if [[ ! -f $version_file ]]; then
    echo "Error: Version file '$version_file' not found."
    exit 1
  fi

  local version=$(cat "$version_file")
  local branch=$(convert_version_to_major_minor_x "$version")

  echo "${branch}"
}

BRANCH=$(get_branch)

wget -q "https://raw.githubusercontent.com/longhorn/dep-versions/refs/heads/${BRANCH}/versions.json" -O package/versions.json || {
  echo "Failed to fetch from branch $BRANCH, trying main branch..."
  wget -q "https://raw.githubusercontent.com/longhorn/dep-versions/refs/heads/main/versions.json" -O package/versions.json || {
    echo "Failed to fetch from main branch. Exiting."
    exit 1
  }
}

echo "Building ${IMAGE} with ARCH=${ARCH} BRANCH=${BRANCH}"
docker build \
  --build-arg ARCH="${ARCH}" \
  --build-arg DEP_VERSION_FILE=package/versions.json \
  -t "${IMAGE}" \
  -f package/Dockerfile .

echo Built ${IMAGE}

echo ${IMAGE} > ./bin/latest_image
